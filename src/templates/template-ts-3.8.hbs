{{{ repository_types }}}

import { type FindParams, find } from '{{ base_dependency_path }}';
import { type UpdateParams, update } from '{{ base_dependency_path }}';
import { type UpsertParams, upsert } from '{{ base_dependency_path }}';
import { type DeleteParams, deleteSelf } from '{{ base_dependency_path }}';
import { type SuscribeByParams, suscribeBy } from '{{ base_dependency_path }}';
import { type SuscribeParams, suscribe } from '{{ base_dependency_path }}';
import { type FindByParams, findBy } from '{{ base_dependency_path }}';
import { BaseQuery } from '{{ base_dependency_path }}';
import { InjectEntityName } from '{{ base_dependency_path }}';
import { FlattenToBoolean } from '{{ base_dependency_path }}';

export type {{ class_name }}Operations = {
  entityColumnsWithRelationsSelection: Partial<FlattenToBoolean<{{ entity_name }}>>;
  entityColumns: {{ select_column }};
  entitySetInput: {{ set_input }};
  entityInserInput: {{ insert_input }};
  boolExpression: {{ bool_exp }};
  orderByExpressionList: {{ order_by }}[];
  scalarType: {{ scalar_type }};
  appendSetInput:{{#if append_input }} {{append_input}}{{ else }}never{{/if}};
  prependSetInput:{{#if prepend_input }} {{prepend_input}}{{ else }}never{{/if}};
};

export class {{ class_name }}Repository {
  private table: string;

  constructor() {
    this.table = '{{ table_name }}';
  }

  getBaseQuery(): BaseQuery {
    return {
      entityName: this.table
    };
  }

  @InjectEntityName()
  findBy(
    findByParams: FindByParams<
      {{ class_name }}Operations['boolExpression'],
      {{ class_name }}Operations['entityColumnsWithRelationsSelection'],
      {{ class_name }}Operations['scalarType']
    >
  ) {
    return findBy(findByParams);
  }

  @InjectEntityName()
  find(
    findParams: FindParams<
      {{ class_name }}Operations['entityColumnsWithRelationsSelection'],
      {{ class_name }}Operations['boolExpression'],
      {{ class_name }}Operations['orderByExpressionList'],
      {{ class_name }}Operations['entityColumns'],
      {{ class_name }}Operations['scalarType']
    >
  ) {
    return find(findParams);
  }

  @InjectEntityName()
  update(
    updateParams: UpdateParams<
      {{ class_name }}Operations['boolExpression'],
      {{ class_name }}Operations['entitySetInput'],
      {{ class_name }}Operations['appendSetInput'],
      {{ class_name }}Operations['prependSetInput'],
      {{ class_name }}Operations['entityColumns'],
      {{ class_name }}Operations['scalarType']
    >
  ) {
    return update(updateParams);
  }

  @InjectEntityName()
  upsert(
    upsertParams: UpsertParams<
      {{ class_name }}Operations['entityInserInput'],
      {{ class_name }}Operations['entityColumns']
    >
  ) {
    return upsert(upsertParams);
  }

  @InjectEntityName()
  delete(
    deleteParams: DeleteParams<
      {{ class_name }}Operations['boolExpression'],
      {{ class_name }}Operations['entityColumns'],
      {{ class_name }}Operations['scalarType']
    >
  ) {
    return deleteSelf(deleteParams);
  }

  @InjectEntityName()
  suscribeByUuid(
    suscribeByParams: SuscribeByParams<
      {{ class_name }}Operations['entityColumnsWithRelationsSelection'],
      {{ class_name }}Operations['scalarType']
    >
  ) {
    return suscribeBy(suscribeByParams);
  }

  @InjectEntityName()
  suscribe(
    suscribeParams: SuscribeParams<
      {{ class_name }}Operations['entityColumnsWithRelationsSelection'],
      {{ class_name }}Operations['boolExpression'],
      {{ class_name }}Operations['orderByExpressionList'],
      {{ class_name }}Operations['scalarType']
    >
  ) {
    return suscribe(suscribeParams);
  }
}
